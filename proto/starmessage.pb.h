// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: starmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_starmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_starmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_starmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_starmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_starmessage_2eproto;
namespace txstar {
class joinReq;
class joinReqDefaultTypeInternal;
extern joinReqDefaultTypeInternal _joinReq_default_instance_;
class joinRsp;
class joinRspDefaultTypeInternal;
extern joinRspDefaultTypeInternal _joinRsp_default_instance_;
class nodeinfo;
class nodeinfoDefaultTypeInternal;
extern nodeinfoDefaultTypeInternal _nodeinfo_default_instance_;
class stabilizeReq;
class stabilizeReqDefaultTypeInternal;
extern stabilizeReqDefaultTypeInternal _stabilizeReq_default_instance_;
class stabilizeRsp;
class stabilizeRspDefaultTypeInternal;
extern stabilizeRspDefaultTypeInternal _stabilizeRsp_default_instance_;
class successorNtf;
class successorNtfDefaultTypeInternal;
extern successorNtfDefaultTypeInternal _successorNtf_default_instance_;
class successorReq;
class successorReqDefaultTypeInternal;
extern successorReqDefaultTypeInternal _successorReq_default_instance_;
class successorRsp;
class successorRspDefaultTypeInternal;
extern successorRspDefaultTypeInternal _successorRsp_default_instance_;
}  // namespace txstar
PROTOBUF_NAMESPACE_OPEN
template<> ::txstar::joinReq* Arena::CreateMaybeMessage<::txstar::joinReq>(Arena*);
template<> ::txstar::joinRsp* Arena::CreateMaybeMessage<::txstar::joinRsp>(Arena*);
template<> ::txstar::nodeinfo* Arena::CreateMaybeMessage<::txstar::nodeinfo>(Arena*);
template<> ::txstar::stabilizeReq* Arena::CreateMaybeMessage<::txstar::stabilizeReq>(Arena*);
template<> ::txstar::stabilizeRsp* Arena::CreateMaybeMessage<::txstar::stabilizeRsp>(Arena*);
template<> ::txstar::successorNtf* Arena::CreateMaybeMessage<::txstar::successorNtf>(Arena*);
template<> ::txstar::successorReq* Arena::CreateMaybeMessage<::txstar::successorReq>(Arena*);
template<> ::txstar::successorRsp* Arena::CreateMaybeMessage<::txstar::successorRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace txstar {

// ===================================================================

class nodeinfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.nodeinfo) */ {
 public:
  inline nodeinfo() : nodeinfo(nullptr) {};
  virtual ~nodeinfo();

  nodeinfo(const nodeinfo& from);
  nodeinfo(nodeinfo&& from) noexcept
    : nodeinfo() {
    *this = ::std::move(from);
  }

  inline nodeinfo& operator=(const nodeinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline nodeinfo& operator=(nodeinfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nodeinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nodeinfo* internal_default_instance() {
    return reinterpret_cast<const nodeinfo*>(
               &_nodeinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(nodeinfo& a, nodeinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(nodeinfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nodeinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nodeinfo* New() const final {
    return CreateMaybeMessage<nodeinfo>(nullptr);
  }

  nodeinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nodeinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nodeinfo& from);
  void MergeFrom(const nodeinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nodeinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.nodeinfo";
  }
  protected:
  explicit nodeinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kPortFieldNumber = 3,
    kNodeidFieldNumber = 1,
  };
  // required string address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // required string port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_port();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_port(
      std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // required uint32 nodeid = 1;
  bool has_nodeid() const;
  private:
  bool _internal_has_nodeid() const;
  public:
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nodeid() const;
  void _internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:txstar.nodeinfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeid_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// -------------------------------------------------------------------

class successorReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.successorReq) */ {
 public:
  inline successorReq() : successorReq(nullptr) {};
  virtual ~successorReq();

  successorReq(const successorReq& from);
  successorReq(successorReq&& from) noexcept
    : successorReq() {
    *this = ::std::move(from);
  }

  inline successorReq& operator=(const successorReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline successorReq& operator=(successorReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const successorReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const successorReq* internal_default_instance() {
    return reinterpret_cast<const successorReq*>(
               &_successorReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(successorReq& a, successorReq& b) {
    a.Swap(&b);
  }
  inline void Swap(successorReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(successorReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline successorReq* New() const final {
    return CreateMaybeMessage<successorReq>(nullptr);
  }

  successorReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<successorReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const successorReq& from);
  void MergeFrom(const successorReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(successorReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.successorReq";
  }
  protected:
  explicit successorReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // required .txstar.nodeinfo node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::txstar::nodeinfo& node() const;
  ::txstar::nodeinfo* release_node();
  ::txstar::nodeinfo* mutable_node();
  void set_allocated_node(::txstar::nodeinfo* node);
  private:
  const ::txstar::nodeinfo& _internal_node() const;
  ::txstar::nodeinfo* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::txstar::nodeinfo* node);
  ::txstar::nodeinfo* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:txstar.successorReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::txstar::nodeinfo* node_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// -------------------------------------------------------------------

class successorRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.successorRsp) */ {
 public:
  inline successorRsp() : successorRsp(nullptr) {};
  virtual ~successorRsp();

  successorRsp(const successorRsp& from);
  successorRsp(successorRsp&& from) noexcept
    : successorRsp() {
    *this = ::std::move(from);
  }

  inline successorRsp& operator=(const successorRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline successorRsp& operator=(successorRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const successorRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const successorRsp* internal_default_instance() {
    return reinterpret_cast<const successorRsp*>(
               &_successorRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(successorRsp& a, successorRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(successorRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(successorRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline successorRsp* New() const final {
    return CreateMaybeMessage<successorRsp>(nullptr);
  }

  successorRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<successorRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const successorRsp& from);
  void MergeFrom(const successorRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(successorRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.successorRsp";
  }
  protected:
  explicit successorRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // required .txstar.nodeinfo node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::txstar::nodeinfo& node() const;
  ::txstar::nodeinfo* release_node();
  ::txstar::nodeinfo* mutable_node();
  void set_allocated_node(::txstar::nodeinfo* node);
  private:
  const ::txstar::nodeinfo& _internal_node() const;
  ::txstar::nodeinfo* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::txstar::nodeinfo* node);
  ::txstar::nodeinfo* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:txstar.successorRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::txstar::nodeinfo* node_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// -------------------------------------------------------------------

class successorNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.successorNtf) */ {
 public:
  inline successorNtf() : successorNtf(nullptr) {};
  virtual ~successorNtf();

  successorNtf(const successorNtf& from);
  successorNtf(successorNtf&& from) noexcept
    : successorNtf() {
    *this = ::std::move(from);
  }

  inline successorNtf& operator=(const successorNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline successorNtf& operator=(successorNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const successorNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const successorNtf* internal_default_instance() {
    return reinterpret_cast<const successorNtf*>(
               &_successorNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(successorNtf& a, successorNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(successorNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(successorNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline successorNtf* New() const final {
    return CreateMaybeMessage<successorNtf>(nullptr);
  }

  successorNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<successorNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const successorNtf& from);
  void MergeFrom(const successorNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(successorNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.successorNtf";
  }
  protected:
  explicit successorNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // required .txstar.nodeinfo node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::txstar::nodeinfo& node() const;
  ::txstar::nodeinfo* release_node();
  ::txstar::nodeinfo* mutable_node();
  void set_allocated_node(::txstar::nodeinfo* node);
  private:
  const ::txstar::nodeinfo& _internal_node() const;
  ::txstar::nodeinfo* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::txstar::nodeinfo* node);
  ::txstar::nodeinfo* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:txstar.successorNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::txstar::nodeinfo* node_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// -------------------------------------------------------------------

class joinReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.joinReq) */ {
 public:
  inline joinReq() : joinReq(nullptr) {};
  virtual ~joinReq();

  joinReq(const joinReq& from);
  joinReq(joinReq&& from) noexcept
    : joinReq() {
    *this = ::std::move(from);
  }

  inline joinReq& operator=(const joinReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline joinReq& operator=(joinReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const joinReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const joinReq* internal_default_instance() {
    return reinterpret_cast<const joinReq*>(
               &_joinReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(joinReq& a, joinReq& b) {
    a.Swap(&b);
  }
  inline void Swap(joinReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(joinReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline joinReq* New() const final {
    return CreateMaybeMessage<joinReq>(nullptr);
  }

  joinReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<joinReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const joinReq& from);
  void MergeFrom(const joinReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(joinReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.joinReq";
  }
  protected:
  explicit joinReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // required .txstar.nodeinfo node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::txstar::nodeinfo& node() const;
  ::txstar::nodeinfo* release_node();
  ::txstar::nodeinfo* mutable_node();
  void set_allocated_node(::txstar::nodeinfo* node);
  private:
  const ::txstar::nodeinfo& _internal_node() const;
  ::txstar::nodeinfo* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::txstar::nodeinfo* node);
  ::txstar::nodeinfo* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:txstar.joinReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::txstar::nodeinfo* node_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// -------------------------------------------------------------------

class joinRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.joinRsp) */ {
 public:
  inline joinRsp() : joinRsp(nullptr) {};
  virtual ~joinRsp();

  joinRsp(const joinRsp& from);
  joinRsp(joinRsp&& from) noexcept
    : joinRsp() {
    *this = ::std::move(from);
  }

  inline joinRsp& operator=(const joinRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline joinRsp& operator=(joinRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const joinRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const joinRsp* internal_default_instance() {
    return reinterpret_cast<const joinRsp*>(
               &_joinRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(joinRsp& a, joinRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(joinRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(joinRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline joinRsp* New() const final {
    return CreateMaybeMessage<joinRsp>(nullptr);
  }

  joinRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<joinRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const joinRsp& from);
  void MergeFrom(const joinRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(joinRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.joinRsp";
  }
  protected:
  explicit joinRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNxtFieldNumber = 1,
    kPreFieldNumber = 2,
  };
  // required .txstar.nodeinfo nxt = 1;
  bool has_nxt() const;
  private:
  bool _internal_has_nxt() const;
  public:
  void clear_nxt();
  const ::txstar::nodeinfo& nxt() const;
  ::txstar::nodeinfo* release_nxt();
  ::txstar::nodeinfo* mutable_nxt();
  void set_allocated_nxt(::txstar::nodeinfo* nxt);
  private:
  const ::txstar::nodeinfo& _internal_nxt() const;
  ::txstar::nodeinfo* _internal_mutable_nxt();
  public:
  void unsafe_arena_set_allocated_nxt(
      ::txstar::nodeinfo* nxt);
  ::txstar::nodeinfo* unsafe_arena_release_nxt();

  // required .txstar.nodeinfo pre = 2;
  bool has_pre() const;
  private:
  bool _internal_has_pre() const;
  public:
  void clear_pre();
  const ::txstar::nodeinfo& pre() const;
  ::txstar::nodeinfo* release_pre();
  ::txstar::nodeinfo* mutable_pre();
  void set_allocated_pre(::txstar::nodeinfo* pre);
  private:
  const ::txstar::nodeinfo& _internal_pre() const;
  ::txstar::nodeinfo* _internal_mutable_pre();
  public:
  void unsafe_arena_set_allocated_pre(
      ::txstar::nodeinfo* pre);
  ::txstar::nodeinfo* unsafe_arena_release_pre();

  // @@protoc_insertion_point(class_scope:txstar.joinRsp)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::txstar::nodeinfo* nxt_;
  ::txstar::nodeinfo* pre_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// -------------------------------------------------------------------

class stabilizeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.stabilizeReq) */ {
 public:
  inline stabilizeReq() : stabilizeReq(nullptr) {};
  virtual ~stabilizeReq();

  stabilizeReq(const stabilizeReq& from);
  stabilizeReq(stabilizeReq&& from) noexcept
    : stabilizeReq() {
    *this = ::std::move(from);
  }

  inline stabilizeReq& operator=(const stabilizeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline stabilizeReq& operator=(stabilizeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stabilizeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stabilizeReq* internal_default_instance() {
    return reinterpret_cast<const stabilizeReq*>(
               &_stabilizeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(stabilizeReq& a, stabilizeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(stabilizeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stabilizeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stabilizeReq* New() const final {
    return CreateMaybeMessage<stabilizeReq>(nullptr);
  }

  stabilizeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stabilizeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stabilizeReq& from);
  void MergeFrom(const stabilizeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stabilizeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.stabilizeReq";
  }
  protected:
  explicit stabilizeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // required .txstar.nodeinfo node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::txstar::nodeinfo& node() const;
  ::txstar::nodeinfo* release_node();
  ::txstar::nodeinfo* mutable_node();
  void set_allocated_node(::txstar::nodeinfo* node);
  private:
  const ::txstar::nodeinfo& _internal_node() const;
  ::txstar::nodeinfo* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::txstar::nodeinfo* node);
  ::txstar::nodeinfo* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:txstar.stabilizeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::txstar::nodeinfo* node_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// -------------------------------------------------------------------

class stabilizeRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txstar.stabilizeRsp) */ {
 public:
  inline stabilizeRsp() : stabilizeRsp(nullptr) {};
  virtual ~stabilizeRsp();

  stabilizeRsp(const stabilizeRsp& from);
  stabilizeRsp(stabilizeRsp&& from) noexcept
    : stabilizeRsp() {
    *this = ::std::move(from);
  }

  inline stabilizeRsp& operator=(const stabilizeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline stabilizeRsp& operator=(stabilizeRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const stabilizeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const stabilizeRsp* internal_default_instance() {
    return reinterpret_cast<const stabilizeRsp*>(
               &_stabilizeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(stabilizeRsp& a, stabilizeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(stabilizeRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(stabilizeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline stabilizeRsp* New() const final {
    return CreateMaybeMessage<stabilizeRsp>(nullptr);
  }

  stabilizeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<stabilizeRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const stabilizeRsp& from);
  void MergeFrom(const stabilizeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(stabilizeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txstar.stabilizeRsp";
  }
  protected:
  explicit stabilizeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_starmessage_2eproto);
    return ::descriptor_table_starmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreFieldNumber = 1,
  };
  // required .txstar.nodeinfo pre = 1;
  bool has_pre() const;
  private:
  bool _internal_has_pre() const;
  public:
  void clear_pre();
  const ::txstar::nodeinfo& pre() const;
  ::txstar::nodeinfo* release_pre();
  ::txstar::nodeinfo* mutable_pre();
  void set_allocated_pre(::txstar::nodeinfo* pre);
  private:
  const ::txstar::nodeinfo& _internal_pre() const;
  ::txstar::nodeinfo* _internal_mutable_pre();
  public:
  void unsafe_arena_set_allocated_pre(
      ::txstar::nodeinfo* pre);
  ::txstar::nodeinfo* unsafe_arena_release_pre();

  // @@protoc_insertion_point(class_scope:txstar.stabilizeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::txstar::nodeinfo* pre_;
  friend struct ::TableStruct_starmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// nodeinfo

// required uint32 nodeid = 1;
inline bool nodeinfo::_internal_has_nodeid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool nodeinfo::has_nodeid() const {
  return _internal_has_nodeid();
}
inline void nodeinfo::clear_nodeid() {
  nodeid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nodeinfo::_internal_nodeid() const {
  return nodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nodeinfo::nodeid() const {
  // @@protoc_insertion_point(field_get:txstar.nodeinfo.nodeid)
  return _internal_nodeid();
}
inline void nodeinfo::_internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nodeid_ = value;
}
inline void nodeinfo::set_nodeid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:txstar.nodeinfo.nodeid)
}

// required string address = 2;
inline bool nodeinfo::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool nodeinfo::has_address() const {
  return _internal_has_address();
}
inline void nodeinfo::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& nodeinfo::address() const {
  // @@protoc_insertion_point(field_get:txstar.nodeinfo.address)
  return _internal_address();
}
inline void nodeinfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:txstar.nodeinfo.address)
}
inline std::string* nodeinfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:txstar.nodeinfo.address)
  return _internal_mutable_address();
}
inline const std::string& nodeinfo::_internal_address() const {
  return address_.Get();
}
inline void nodeinfo::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void nodeinfo::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txstar.nodeinfo.address)
}
inline void nodeinfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:txstar.nodeinfo.address)
}
inline void nodeinfo::set_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txstar.nodeinfo.address)
}
inline std::string* nodeinfo::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000001u;
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* nodeinfo::release_address() {
  // @@protoc_insertion_point(field_release:txstar.nodeinfo.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void nodeinfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txstar.nodeinfo.address)
}
inline std::string* nodeinfo::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:txstar.nodeinfo.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void nodeinfo::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.nodeinfo.address)
}

// required string port = 3;
inline bool nodeinfo::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool nodeinfo::has_port() const {
  return _internal_has_port();
}
inline void nodeinfo::clear_port() {
  port_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& nodeinfo::port() const {
  // @@protoc_insertion_point(field_get:txstar.nodeinfo.port)
  return _internal_port();
}
inline void nodeinfo::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:txstar.nodeinfo.port)
}
inline std::string* nodeinfo::mutable_port() {
  // @@protoc_insertion_point(field_mutable:txstar.nodeinfo.port)
  return _internal_mutable_port();
}
inline const std::string& nodeinfo::_internal_port() const {
  return port_.Get();
}
inline void nodeinfo::_internal_set_port(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void nodeinfo::set_port(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  port_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:txstar.nodeinfo.port)
}
inline void nodeinfo::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:txstar.nodeinfo.port)
}
inline void nodeinfo::set_port(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:txstar.nodeinfo.port)
}
inline std::string* nodeinfo::_internal_mutable_port() {
  _has_bits_[0] |= 0x00000002u;
  return port_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* nodeinfo::release_port() {
  // @@protoc_insertion_point(field_release:txstar.nodeinfo.port)
  if (!_internal_has_port()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return port_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void nodeinfo::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:txstar.nodeinfo.port)
}
inline std::string* nodeinfo::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:txstar.nodeinfo.port)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return port_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void nodeinfo::unsafe_arena_set_allocated_port(
    std::string* port) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (port != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  port_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      port, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.nodeinfo.port)
}

// -------------------------------------------------------------------

// successorReq

// required .txstar.nodeinfo node = 1;
inline bool successorReq::_internal_has_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || node_ != nullptr);
  return value;
}
inline bool successorReq::has_node() const {
  return _internal_has_node();
}
inline void successorReq::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::txstar::nodeinfo& successorReq::_internal_node() const {
  const ::txstar::nodeinfo* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& successorReq::node() const {
  // @@protoc_insertion_point(field_get:txstar.successorReq.node)
  return _internal_node();
}
inline void successorReq::unsafe_arena_set_allocated_node(
    ::txstar::nodeinfo* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.successorReq.node)
}
inline ::txstar::nodeinfo* successorReq::release_node() {
  auto temp = unsafe_arena_release_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* successorReq::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:txstar.successorReq.node)
  _has_bits_[0] &= ~0x00000001u;
  ::txstar::nodeinfo* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* successorReq::_internal_mutable_node() {
  _has_bits_[0] |= 0x00000001u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::txstar::nodeinfo* successorReq::mutable_node() {
  // @@protoc_insertion_point(field_mutable:txstar.successorReq.node)
  return _internal_mutable_node();
}
inline void successorReq::set_allocated_node(::txstar::nodeinfo* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:txstar.successorReq.node)
}

// -------------------------------------------------------------------

// successorRsp

// required .txstar.nodeinfo node = 1;
inline bool successorRsp::_internal_has_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || node_ != nullptr);
  return value;
}
inline bool successorRsp::has_node() const {
  return _internal_has_node();
}
inline void successorRsp::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::txstar::nodeinfo& successorRsp::_internal_node() const {
  const ::txstar::nodeinfo* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& successorRsp::node() const {
  // @@protoc_insertion_point(field_get:txstar.successorRsp.node)
  return _internal_node();
}
inline void successorRsp::unsafe_arena_set_allocated_node(
    ::txstar::nodeinfo* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.successorRsp.node)
}
inline ::txstar::nodeinfo* successorRsp::release_node() {
  auto temp = unsafe_arena_release_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* successorRsp::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:txstar.successorRsp.node)
  _has_bits_[0] &= ~0x00000001u;
  ::txstar::nodeinfo* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* successorRsp::_internal_mutable_node() {
  _has_bits_[0] |= 0x00000001u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::txstar::nodeinfo* successorRsp::mutable_node() {
  // @@protoc_insertion_point(field_mutable:txstar.successorRsp.node)
  return _internal_mutable_node();
}
inline void successorRsp::set_allocated_node(::txstar::nodeinfo* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:txstar.successorRsp.node)
}

// -------------------------------------------------------------------

// successorNtf

// required .txstar.nodeinfo node = 1;
inline bool successorNtf::_internal_has_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || node_ != nullptr);
  return value;
}
inline bool successorNtf::has_node() const {
  return _internal_has_node();
}
inline void successorNtf::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::txstar::nodeinfo& successorNtf::_internal_node() const {
  const ::txstar::nodeinfo* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& successorNtf::node() const {
  // @@protoc_insertion_point(field_get:txstar.successorNtf.node)
  return _internal_node();
}
inline void successorNtf::unsafe_arena_set_allocated_node(
    ::txstar::nodeinfo* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.successorNtf.node)
}
inline ::txstar::nodeinfo* successorNtf::release_node() {
  auto temp = unsafe_arena_release_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* successorNtf::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:txstar.successorNtf.node)
  _has_bits_[0] &= ~0x00000001u;
  ::txstar::nodeinfo* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* successorNtf::_internal_mutable_node() {
  _has_bits_[0] |= 0x00000001u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::txstar::nodeinfo* successorNtf::mutable_node() {
  // @@protoc_insertion_point(field_mutable:txstar.successorNtf.node)
  return _internal_mutable_node();
}
inline void successorNtf::set_allocated_node(::txstar::nodeinfo* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:txstar.successorNtf.node)
}

// -------------------------------------------------------------------

// joinReq

// required .txstar.nodeinfo node = 1;
inline bool joinReq::_internal_has_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || node_ != nullptr);
  return value;
}
inline bool joinReq::has_node() const {
  return _internal_has_node();
}
inline void joinReq::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::txstar::nodeinfo& joinReq::_internal_node() const {
  const ::txstar::nodeinfo* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& joinReq::node() const {
  // @@protoc_insertion_point(field_get:txstar.joinReq.node)
  return _internal_node();
}
inline void joinReq::unsafe_arena_set_allocated_node(
    ::txstar::nodeinfo* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.joinReq.node)
}
inline ::txstar::nodeinfo* joinReq::release_node() {
  auto temp = unsafe_arena_release_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* joinReq::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:txstar.joinReq.node)
  _has_bits_[0] &= ~0x00000001u;
  ::txstar::nodeinfo* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* joinReq::_internal_mutable_node() {
  _has_bits_[0] |= 0x00000001u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::txstar::nodeinfo* joinReq::mutable_node() {
  // @@protoc_insertion_point(field_mutable:txstar.joinReq.node)
  return _internal_mutable_node();
}
inline void joinReq::set_allocated_node(::txstar::nodeinfo* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:txstar.joinReq.node)
}

// -------------------------------------------------------------------

// joinRsp

// required .txstar.nodeinfo nxt = 1;
inline bool joinRsp::_internal_has_nxt() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || nxt_ != nullptr);
  return value;
}
inline bool joinRsp::has_nxt() const {
  return _internal_has_nxt();
}
inline void joinRsp::clear_nxt() {
  if (nxt_ != nullptr) nxt_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::txstar::nodeinfo& joinRsp::_internal_nxt() const {
  const ::txstar::nodeinfo* p = nxt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& joinRsp::nxt() const {
  // @@protoc_insertion_point(field_get:txstar.joinRsp.nxt)
  return _internal_nxt();
}
inline void joinRsp::unsafe_arena_set_allocated_nxt(
    ::txstar::nodeinfo* nxt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nxt_);
  }
  nxt_ = nxt;
  if (nxt) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.joinRsp.nxt)
}
inline ::txstar::nodeinfo* joinRsp::release_nxt() {
  auto temp = unsafe_arena_release_nxt();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* joinRsp::unsafe_arena_release_nxt() {
  // @@protoc_insertion_point(field_release:txstar.joinRsp.nxt)
  _has_bits_[0] &= ~0x00000001u;
  ::txstar::nodeinfo* temp = nxt_;
  nxt_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* joinRsp::_internal_mutable_nxt() {
  _has_bits_[0] |= 0x00000001u;
  if (nxt_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    nxt_ = p;
  }
  return nxt_;
}
inline ::txstar::nodeinfo* joinRsp::mutable_nxt() {
  // @@protoc_insertion_point(field_mutable:txstar.joinRsp.nxt)
  return _internal_mutable_nxt();
}
inline void joinRsp::set_allocated_nxt(::txstar::nodeinfo* nxt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nxt_;
  }
  if (nxt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nxt);
    if (message_arena != submessage_arena) {
      nxt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nxt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nxt_ = nxt;
  // @@protoc_insertion_point(field_set_allocated:txstar.joinRsp.nxt)
}

// required .txstar.nodeinfo pre = 2;
inline bool joinRsp::_internal_has_pre() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pre_ != nullptr);
  return value;
}
inline bool joinRsp::has_pre() const {
  return _internal_has_pre();
}
inline void joinRsp::clear_pre() {
  if (pre_ != nullptr) pre_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::txstar::nodeinfo& joinRsp::_internal_pre() const {
  const ::txstar::nodeinfo* p = pre_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& joinRsp::pre() const {
  // @@protoc_insertion_point(field_get:txstar.joinRsp.pre)
  return _internal_pre();
}
inline void joinRsp::unsafe_arena_set_allocated_pre(
    ::txstar::nodeinfo* pre) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_);
  }
  pre_ = pre;
  if (pre) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.joinRsp.pre)
}
inline ::txstar::nodeinfo* joinRsp::release_pre() {
  auto temp = unsafe_arena_release_pre();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* joinRsp::unsafe_arena_release_pre() {
  // @@protoc_insertion_point(field_release:txstar.joinRsp.pre)
  _has_bits_[0] &= ~0x00000002u;
  ::txstar::nodeinfo* temp = pre_;
  pre_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* joinRsp::_internal_mutable_pre() {
  _has_bits_[0] |= 0x00000002u;
  if (pre_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    pre_ = p;
  }
  return pre_;
}
inline ::txstar::nodeinfo* joinRsp::mutable_pre() {
  // @@protoc_insertion_point(field_mutable:txstar.joinRsp.pre)
  return _internal_mutable_pre();
}
inline void joinRsp::set_allocated_pre(::txstar::nodeinfo* pre) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pre_;
  }
  if (pre) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pre);
    if (message_arena != submessage_arena) {
      pre = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pre_ = pre;
  // @@protoc_insertion_point(field_set_allocated:txstar.joinRsp.pre)
}

// -------------------------------------------------------------------

// stabilizeReq

// required .txstar.nodeinfo node = 1;
inline bool stabilizeReq::_internal_has_node() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || node_ != nullptr);
  return value;
}
inline bool stabilizeReq::has_node() const {
  return _internal_has_node();
}
inline void stabilizeReq::clear_node() {
  if (node_ != nullptr) node_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::txstar::nodeinfo& stabilizeReq::_internal_node() const {
  const ::txstar::nodeinfo* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& stabilizeReq::node() const {
  // @@protoc_insertion_point(field_get:txstar.stabilizeReq.node)
  return _internal_node();
}
inline void stabilizeReq::unsafe_arena_set_allocated_node(
    ::txstar::nodeinfo* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.stabilizeReq.node)
}
inline ::txstar::nodeinfo* stabilizeReq::release_node() {
  auto temp = unsafe_arena_release_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* stabilizeReq::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:txstar.stabilizeReq.node)
  _has_bits_[0] &= ~0x00000001u;
  ::txstar::nodeinfo* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* stabilizeReq::_internal_mutable_node() {
  _has_bits_[0] |= 0x00000001u;
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::txstar::nodeinfo* stabilizeReq::mutable_node() {
  // @@protoc_insertion_point(field_mutable:txstar.stabilizeReq.node)
  return _internal_mutable_node();
}
inline void stabilizeReq::set_allocated_node(::txstar::nodeinfo* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:txstar.stabilizeReq.node)
}

// -------------------------------------------------------------------

// stabilizeRsp

// required .txstar.nodeinfo pre = 1;
inline bool stabilizeRsp::_internal_has_pre() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pre_ != nullptr);
  return value;
}
inline bool stabilizeRsp::has_pre() const {
  return _internal_has_pre();
}
inline void stabilizeRsp::clear_pre() {
  if (pre_ != nullptr) pre_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::txstar::nodeinfo& stabilizeRsp::_internal_pre() const {
  const ::txstar::nodeinfo* p = pre_;
  return p != nullptr ? *p : *reinterpret_cast<const ::txstar::nodeinfo*>(
      &::txstar::_nodeinfo_default_instance_);
}
inline const ::txstar::nodeinfo& stabilizeRsp::pre() const {
  // @@protoc_insertion_point(field_get:txstar.stabilizeRsp.pre)
  return _internal_pre();
}
inline void stabilizeRsp::unsafe_arena_set_allocated_pre(
    ::txstar::nodeinfo* pre) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pre_);
  }
  pre_ = pre;
  if (pre) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:txstar.stabilizeRsp.pre)
}
inline ::txstar::nodeinfo* stabilizeRsp::release_pre() {
  auto temp = unsafe_arena_release_pre();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::txstar::nodeinfo* stabilizeRsp::unsafe_arena_release_pre() {
  // @@protoc_insertion_point(field_release:txstar.stabilizeRsp.pre)
  _has_bits_[0] &= ~0x00000001u;
  ::txstar::nodeinfo* temp = pre_;
  pre_ = nullptr;
  return temp;
}
inline ::txstar::nodeinfo* stabilizeRsp::_internal_mutable_pre() {
  _has_bits_[0] |= 0x00000001u;
  if (pre_ == nullptr) {
    auto* p = CreateMaybeMessage<::txstar::nodeinfo>(GetArena());
    pre_ = p;
  }
  return pre_;
}
inline ::txstar::nodeinfo* stabilizeRsp::mutable_pre() {
  // @@protoc_insertion_point(field_mutable:txstar.stabilizeRsp.pre)
  return _internal_mutable_pre();
}
inline void stabilizeRsp::set_allocated_pre(::txstar::nodeinfo* pre) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pre_;
  }
  if (pre) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pre);
    if (message_arena != submessage_arena) {
      pre = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pre, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pre_ = pre;
  // @@protoc_insertion_point(field_set_allocated:txstar.stabilizeRsp.pre)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txstar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_starmessage_2eproto
